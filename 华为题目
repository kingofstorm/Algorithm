
/*华为笔试题
小明是个马大哈，某天他到超市买了若干双筷子(n 小于 20)
筷子的长度不尽相同，他把全部筷子都放在购物袋里面拿回家，路上不小心漏了一根
请你用程序帮他找出漏掉的筷子是多长的。
输入：  
参数一：剩下的筷子的长度值的数组，例如：1, 2, 3, 2, 1, 3, 2，(筷子的长度必然大于0, 不需要校验)
参数二：数组的元素的数量；
返回值：漏掉的筷子的长度，如上述输入返回：2
当输入的筷子数据异常时返回-1，如：找不到漏掉的筷子
如果漏掉了多根筷子，返回任意一根漏掉的筷子即可。
这个题目有点容易误解的地方就是：n小于20，n到底是n双，还是n根。
*/
#include <stdio.h>
#include<iostream>
#include<vector>
#include<string>
#include<sstream>
#include<unordered_map>
#include<algorithm>
using namespace std;

int main()
{
	int size;
	int tmp;
	cin >> size;
	if (size >=20 || size < 0)
	{
		cout << "-1";
		return 0;
	}
	vector<int>  foo;
	
	for (int i = 0; i < size; i++)
	{
		cin >> tmp;
		foo.push_back(tmp);
	}
	unordered_map<int, int> hash;
	int result_num=-1;
	for (auto r : foo)
		hash[r]++;
	for (auto r : hash)
	{
		if (r.second == 1)
		{
			result_num = r.first;
			break;
		}
	}

	cout << result_num ;
	return 0;

}

/*输入一个十进制的正整数，从低位开始查找，找到第一个置位（1）比特的位置
按照如下规则对正整数进行置位比特的查找：
1. 当查找失败时，比如输入正整数0，返回-1
2. 当查找成功时，返回该比特的位置
例子：
比如 如入12，二进制表示是0000000000001100，则第一个置位比特为2
*/


/*注意使用long long 类型*/

#include <stdio.h>
#include<iostream>
#include<vector>
#include<string>
#include<sstream>
#include<unordered_map>
#include<algorithm>
using namespace std;


int find_low_bit(long long number)
{
	 long long min = 1;
	 long long max = ( min<< 62);
	 if (number > max)
		return -1;
	 long long input_number=number;
	if (input_number <= 0)
	{
		return -1;
	}
	int count = 0;
	long long  foo = 1;
	/*注意不要用(input_number&foo)!=1    错的*/
	while (!(input_number&foo))
	{
		count++;
		foo <<= 1;
	}
	return count;
}
int main()
{
	 /*long long rr= 1;
		rr= rr<< 63;*/
	//unsigned long long  rr= 18446744073709551615;
	//cout << rr << endl;
	long long in;
	cin >> in;
	cout<< find_low_bit(in);
	
	return 0;
}

/*
华为简易排号机


*/

#include <stdio.h>
#include<iostream>
#include<vector>
#include<string>
#include<sstream>
#include<unordered_map>
#include<algorithm>
#include<queue>
using namespace std;
void wait_Machine_for_bank(void)
{
	
	int N_max = 10000;
	int N = 0;
	int N_normal = 0;
	int N_vip = 0;
	queue<int> q_normal;
	queue<int> q_vip;
	string s;
	while (1)
	{
		int global = -1;
		getline(cin,s);
		if (s == "get")
		{
			global = 1;
			N++;
			N_normal = N;
			q_normal.push(N_normal);
			cout << N << endl;
		}
		if (s == "get vip")
		{
			global = 1;
			N++;
			N_vip = N;
			q_vip.push(N_vip);
			cout << "vip " << N << endl;
		}
		if (s == "call")
		{
			global = 1;
			if (!q_vip.empty())
			{
				cout << "vip "<<q_vip.front() << endl;
				q_vip.pop();
			}
			else
			{
				if (q_normal.empty())
					cout << "error" << endl;
				else
				{
					cout << q_normal.front() << endl;
					q_normal.pop();
				}
			}
		}
		if ((s.size() >= 7 && s[0] == 'd') && (s[5] = 'e')&&s[2]=='l'&&s[3]=='e'&&s[4]=='t')
		{
			global = 1;
			int count_state = -1;
			int count_state1 = -1;
			string ss = "";
			for (int i = 7; i < s.size(); i++)
			{
				if ('0' <= s[i] && s[i] <= '9')
				{
					ss += s[i];
				}
				else
				{
					cout << "error" << endl;
					count_state = 1;
				}
				count_state1 = 1;
			}
			if (count_state == 1)
				continue;
			if (count_state1 == -1)
			{

				cout << "error" << endl;
				continue;

			}
			
			int Num;
			stringstream os;
			os << ss;
			os >> Num;
			os.clear();
		
			int state = -1;
			//int size = q_normal.size();
			queue<int> tmp;
			while (!q_normal.empty())
			{
				if (q_normal.front() != Num)
				{
					tmp.push(q_normal.front());
					q_normal.pop();
				}
				else{
					cout << q_normal.front() << endl;
					q_normal.pop();
					state += 1;
				}
			}
			q_normal = tmp;
			queue<int> tmp1;
			while (!q_vip.empty())
			{
				if (q_vip.front() != Num)
				{
					tmp1.push(q_vip.front());
					q_vip.pop();
				}
				else{
					cout << "vip "<<q_vip.front() << endl;
					q_vip.pop();
					state += 1;
				}
			}
			q_vip= tmp1;
			if (state == -1)
			{
				cout << "error" << endl;
			}

		}
		if (s == "count")
		{
			global = 1;
			int  number = q_normal.size() + q_vip.size();
			cout << number << endl;
		}
		if ((s.size()>=6&&s[5]=='N')&&s[0]=='c'&&s[1]=='o'&&s[2]=='u'&&s[3]=='n'&&s[4]=='t')
		{
			global = 1;
			int count_state = -1;
			int count_state1 = -1;///判断有没有进入for
			string ss="";
			for (int i = 7; i < s.size(); i++)
			{
				if ('0' <= s[i] && s[i] <= '9')
				{
					ss += s[i];
				}
				else
				{
					cout << "error" << endl;
					count_state = 1;
				}
				count_state1 = 1;
			}
			if (count_state == 1)
				continue;
			if (count_state1 == -1)
			{
			
				cout << "error" << endl;
				continue;
				
			}
			int N;
			stringstream os;
			os << ss;
			os >> N;
			os.clear();
			int num1 = 0;
			int num2 = 0;
			queue<int> tmp1;
			queue<int> tmp2;
			while (!q_normal.empty())
			{
				if (q_normal.front() <=N)
				{
					num1++;
					tmp1.push(q_normal.front());
					q_normal.pop();
				}
				else
				{
					tmp1.push(q_normal.front());
					q_normal.pop();	
				}
				
			}
			q_normal = tmp1;

			while (!q_vip.empty())
			{
				if (q_vip.front() <=N)
				{
					num2++;
					tmp2.push(q_vip.front());
					q_vip.pop();
				}
				else
				{
					tmp2.push(q_vip.front());
					q_vip.pop();
				}

			}
			q_vip = tmp2;
			cout << (num1 + num2) << endl;
		}
		if (s == "quit")
			break;
		if (s == "reset")
		{
			 global = 1;
			 N_max = 10000;
			 N = 0;
			 N_normal = 0;
		     N_vip = 0;
			while (!q_normal.empty())
			{
				q_normal.pop();
			}
			while (!q_vip.empty())
			{
				q_vip.pop();
			}

		}
		if (global ==-1)
			cout << "error"<<endl;
	}
}
int main()
{
	wait_Machine_for_bank();
	return 0;

}

